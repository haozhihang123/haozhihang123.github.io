<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haozhihang123.github.io</id>
    <title>HAOZH&apos;S Blog</title>
    <updated>2022-03-05T06:06:21.980Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haozhihang123.github.io"/>
    <link rel="self" href="https://haozhihang123.github.io/atom.xml"/>
    <subtitle>过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封</subtitle>
    <logo>https://haozhihang123.github.io/images/avatar.png</logo>
    <icon>https://haozhihang123.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, HAOZH&apos;S Blog</rights>
    <entry>
        <title type="html"><![CDATA[github部署hexo]]></title>
        <id>https://haozhihang123.github.io/post/github-bu-shu-hexo/</id>
        <link href="https://haozhihang123.github.io/post/github-bu-shu-hexo/">
        </link>
        <updated>2022-03-04T10:41:55.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h2 id="title-github部署hexo博客date-2021-10-13-221513type-hexocategories-博客搭建top_img-false">title: github部署hexo博客<br>
date: 2021-10-13 22:15:13<br>
type: hexo<br>
categories: 博客搭建<br>
top_img: false</h2>
<h1 id="将hexo博客部署到gitub上">将hexo博客部署到gitub上</h1>
<h2 id="前言">前言</h2>
<p>hexo博客可以部署到github，coding，gitee等代码托管平台，优点是可以免费获得域名，不需要买服务器和域名，对于新手来说很友好，也更容易一些。上一篇文章详细介绍了如何在本地搭建hexo博客，并以本机为服务器查看构建的博客，缺点是只能自己在本地查看，其他人无法在网络上查看，本文通过将hexo博客部署到github上，从而使得所有人都可以看到自己写的博客。在后期，我个人觉得github这个域名不还好听，可以自己购买域名，然后关联到github中，这一部分放到最后讲述。</p>
<h2 id="1-安装push工具">1. 安装push工具</h2>
<p>在git终端中输入<strong>pm install hexo-deployer-git --save</strong>来安装push工具。成功的标志如下图：</p>
<figure data-type="image" tabindex="1"><img src="https://haozhihang123.github.io/post-images/1646390740591.png" alt="" loading="lazy"></figure>
<h2 id="2-配置ssh-key">2. 配置SSH key</h2>
<p>在终端中输入<strong>ssh-keygen -t rsa -C &quot;用户邮箱&quot;</strong>，此时终端会要求你输入内容：</p>
<figure data-type="image" tabindex="2"><img src="https://haozhihang123.github.io/post-images/1646390752444.png" alt="" loading="lazy"></figure>
<p>直接回车即可，此时回弹出第二次输入：</p>
<figure data-type="image" tabindex="3"><img src="https://haozhihang123.github.io/post-images/1646390759778.png" alt="" loading="lazy"></figure>
<p>继续回车，显示再次输入：</p>
<figure data-type="image" tabindex="4"><img src="https://haozhihang123.github.io/post-images/1646390767486.png" alt="" loading="lazy"></figure>
<p>继续回车，成功。</p>
<figure data-type="image" tabindex="5"><img src="https://haozhihang123.github.io/post-images/1646390773563.png" alt="" loading="lazy"></figure>
<p>接着在终端中输入<strong>clip &lt; ~/.ssh/id_rsa.pub</strong>将公钥复制到系统的粘贴板上。</p>
<figure data-type="image" tabindex="6"><img src="https://haozhihang123.github.io/post-images/1646390783055.png" alt="" loading="lazy"></figure>
<p>此时可以通过<strong>ctrl + v</strong>可以复制出来，待会github需要。如果中途使用<strong>ctrl + c</strong>，则会覆盖这次的内容，重新在这个终端输入一次:<strong>clip &lt; ~/.ssh/id_rsa.pub</strong>即可。</p>
<h2 id="3-github网站配置密钥">3. github网站配置密钥。</h2>
<p>登陆github网站：https://github.com/ ，点击右上角的<strong>sign in</strong>。</p>
<p><img src="https://haozhihang123.github.io/post-images/1646390792835.png" alt="" loading="lazy"><br>
<img src="https://haozhihang123.github.io/post-images/1646390798430.png" alt="" loading="lazy"></p>
<p>如果有github账号，直接输入上面红框账户密码即可。如果没有，在下方点击蓝色链接<strong>create an account</strong>创建账号，和普通创建账号一样，按要求输入即可。登陆github后，进入settings。</p>
<figure data-type="image" tabindex="7"><img src="https://haozhihang123.github.io/post-images/1646390806316.png" alt="" loading="lazy"></figure>
<p>点击左侧<strong>SSH and GPG Keys</strong>，然后点击右侧的<strong>New SSH key</strong>：</p>
<figure data-type="image" tabindex="8"><img src="https://haozhihang123.github.io/post-images/1646390812684.png" alt="" loading="lazy"></figure>
<p>Title随便写，下面的key是刚才运行<strong>clip &lt; ~/.ssh/id_rsa.pub</strong>后粘贴板的内容，通过<strong>ctrl + v</strong>即可复制到key的框中，内容大致与我类似，如果差别很大，可能是中途用过<strong>ctrl + c</strong>，在终端重新运行一次<strong>clip &lt; ~/.ssh/id_rsa.pub</strong>即可。最终点击<strong>Add ssh key</strong>。</p>
<figure data-type="image" tabindex="9"><img src="https://haozhihang123.github.io/post-images/1646390818802.png" alt="" loading="lazy"></figure>
<p>密钥配置成功标志：</p>
<figure data-type="image" tabindex="10"><img src="https://haozhihang123.github.io/post-images/1646390825284.png" alt="" loading="lazy"></figure>
<h2 id="4-在git终端链接公钥">4. 在git终端链接公钥。</h2>
<p>接着回到终端输入:ssh -T git@github.com</p>
<figure data-type="image" tabindex="11"><img src="https://haozhihang123.github.io/post-images/1646390833586.png" alt="" loading="lazy"></figure>
<p>按要求在终端中输入yes。</p>
<figure data-type="image" tabindex="12"><img src="https://haozhihang123.github.io/post-images/1646390840377.png" alt="" loading="lazy"></figure>
<p>有successfully说明链接成功。</p>
<h2 id="5-在github新建仓库">5. 在github新建仓库。</h2>
<p>点击右上角的头像，然后点击<strong>your respository</strong>。</p>
<figure data-type="image" tabindex="13"><img src="https://haozhihang123.github.io/post-images/1646390849278.png" alt="" loading="lazy"></figure>
<p>点击<strong>new</strong>创建新仓库。</p>
<figure data-type="image" tabindex="14"><img src="https://haozhihang123.github.io/post-images/1646390856647.png" alt="" loading="lazy"></figure>
<p>仓库的构建如下图，需要注意的是，仓库的名字必须是<strong>你的github名字+github.io</strong>，如果错了将会很麻烦。</p>
<figure data-type="image" tabindex="15"><img src="https://haozhihang123.github.io/post-images/1646390862556.png" alt="" loading="lazy"></figure>
<p>新建仓库的结果：仓库的主分支名字是main，这个一会会用到。</p>
<figure data-type="image" tabindex="16"><img src="https://haozhihang123.github.io/post-images/1646390869512.png" alt="" loading="lazy"></figure>
<h2 id="6-将本地的hexo文件上传到github新建的仓库中">6. 将本地的hexo文件上传到github新建的仓库中。</h2>
<p>在刚才的界面点击code，选择SSH，然后点击右侧按钮复制。</p>
<figure data-type="image" tabindex="17"><img src="https://haozhihang123.github.io/post-images/1646390878566.png" alt="" loading="lazy"></figure>
<p>打开本地创建的博客文件夹中的_config.yml文件</p>
<figure data-type="image" tabindex="18"><img src="https://haozhihang123.github.io/post-images/1646390886229.png" alt="" loading="lazy"></figure>
<p>翻到文件底端，找到develop字段进行修改：</p>
<p>改之前：</p>
<figure data-type="image" tabindex="19"><img src="https://haozhihang123.github.io/post-images/1646390911625.png" alt="" loading="lazy"></figure>
<p>改之后：</p>
<figure data-type="image" tabindex="20"><img src="https://haozhihang123.github.io/post-images/1646390918611.png" alt="" loading="lazy"></figure>
<p>第一个固定为git，第二个是刚才复制的结果，第三个是main，后两项来自于下图。</p>
<figure data-type="image" tabindex="21"><img src="https://haozhihang123.github.io/post-images/1646390925187.png" alt="" loading="lazy"></figure>
<p>回到之前的终端：输入<strong>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</strong>，输出一下内容说明成功。</p>
<figure data-type="image" tabindex="22"><img src="https://haozhihang123.github.io/post-images/1646390930952.png" alt="" loading="lazy"></figure>
<p>刷新github仓库，可以看到博客内容已经上传。</p>
<h2 id="7-查看自己博客的网址">7. 查看自己博客的网址。</h2>
<p>点击setting→pages.</p>
<figure data-type="image" tabindex="23"><img src="https://haozhihang123.github.io/post-images/1646390937126.png" alt="" loading="lazy"></figure>
<p>注意一点：这三个位置的名字必须完全一样，大小写不同也不行。不一样的结果就是打不开blog。</p>
<figure data-type="image" tabindex="24"><img src="https://haozhihang123.github.io/post-images/1646390943763.png" alt="" loading="lazy"></figure>
<p>可以看到博客网站已经生成成功，点击网站即可进入个人博客。直接在浏览器搜索栏里输入也可以显示。这就从本地上升到了所有人都可看的程度。</p>
<figure data-type="image" tabindex="25"><img src="https://haozhihang123.github.io/post-images/1646390949670.png" alt="" loading="lazy"></figure>
<h2 id="8-github绑定自己购买的域名">8. github绑定自己购买的域名。</h2>
<ol>
<li>
<p>准备工作</p>
<p>（1）已购买好域名</p>
<p>（2）网站博客已经可以根据username.github.io进行访问</p>
</li>
<li>
<p>开始配置</p>
</li>
</ol>
<p>首先在hexo根目录下的source文件夹内创建CNAME文件（注意：没有任何后缀）</p>
<figure data-type="image" tabindex="26"><img src="https://haozhihang123.github.io/post-images/1646390958956.png" alt="" loading="lazy"></figure>
<p>CNAME文件的内容只填写你购买的域名（如我的：dclxfz.xyz，不要带www，https之类的前缀）</p>
<figure data-type="image" tabindex="27"><img src="https://haozhihang123.github.io/post-images/1646390966871.png" alt="" loading="lazy"></figure>
<p>回到购买域名的网站，修改你的域名解析记录，主要修改记录类型和记录值，其中记录值是username.github.io，例子如下：</p>
<figure data-type="image" tabindex="28"><img src="https://haozhihang123.github.io/post-images/1646390972166.png" alt="" loading="lazy"></figure>
<p>最终输入<strong>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</strong>重新上传博客，github上的根目录会多出刚才创建的CNAME文件。</p>
<figure data-type="image" tabindex="29"><img src="https://haozhihang123.github.io/post-images/1646390977650.png" alt="" loading="lazy"></figure>
<p>到该仓库的设置-&gt;pages中查看，域名已经生成好，可能需要过一段时间才会生效，期间可能进不去。</p>
<figure data-type="image" tabindex="30"><img src="https://haozhihang123.github.io/post-images/1646390982753.png" alt="" loading="lazy"></figure>
<p>至此，自己搭建的博客基本完成。<br>
😀😀😀😀</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python日常问题汇总]]></title>
        <id>https://haozhihang123.github.io/post/python-ri-chang-wen-ti-hui-zong/</id>
        <link href="https://haozhihang123.github.io/post/python-ri-chang-wen-ti-hui-zong/">
        </link>
        <updated>2022-03-01T13:11:20.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h2 id="title-python-日常功能记录date-2021-10-16-152459tags-python学习categories-python长哟那个功能记录top_img-falsecover">title: python 日常功能记录<br>
date: 2021-10-16 15:24:59<br>
tags: python学习<br>
categories: python长哟那个功能记录<br>
top_img: false<br>
cover:</h2>
<p>平时用python过程中，总需要找的简单的程序记录下来，以后方便使用。</p>
<h2 id="python读写txt">python读写txt</h2>
<p>读文件时加with是python自动调用close()函数,如果出现UnicodeDecodeError错误，需要在open中加入encoding=‘UTF-8’</p>
<h3 id="1读取所有行">1.读取所有行</h3>
<pre><code class="language-python">with open('test.txt','r', encoding='UTF-8') as f:
    data = f.readlines()
print(data)
</code></pre>
<h3 id="2读取单行">2.读取单行</h3>
<pre><code class="language-python">with open('test.txt','r', encoding='UTF-8') as f:
    data = f.readline()
    print(data)
</code></pre>
<h3 id="3读取文件所有内容">3.读取文件所有内容</h3>
<pre><code class="language-python">with open('test.txt','r', encoding='UTF-8') as f:
    data = f.read()
    print(data)
</code></pre>
<h3 id="4写文件操作">4.写文件操作</h3>
<pre><code class="language-python">&gt;&gt;&gt; f = open('test.txt', 'w') # 若是'wb'就表示写二进制文件
&gt;&gt;&gt; f.write('Hello, world!')
&gt;&gt;&gt; f.close()
</code></pre>
<h3 id="5numpy保存数据加载数据字典格式">5.numpy保存数据/加载数据/字典格式</h3>
<pre><code class="language-python">&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; test = {'name':'xiaoming','age':12,'job':'student'}
&gt;&gt;&gt; np.save('test.npy',test)
&gt;&gt;&gt; load_test = np.load('test.npy',allow_pickle=True)
&gt;&gt;&gt; load_test.item()
{'name': 'xiaoming', 'age': 12, 'job': 'student'}
&gt;&gt;&gt; load_test.item().get('name')
'xiaoming'
</code></pre>
<h3 id="6循环读取字典">6.循环读取字典</h3>
<pre><code class="language-python">&gt;&gt;&gt; test = {'name':'xiaoming'}
&gt;&gt;&gt; for (key,value) in test.items():
&gt;&gt;&gt;     print(key+':'+value)
'name':'xiaoming'
</code></pre>
<h3 id="7四舍五入函数">7.四舍五入函数</h3>
<pre><code class="language-python">&gt;&gt;&gt; round(1.2)
1
&gt;&gt;&gt; round(1.9)
2
</code></pre>
<h3 id="8向上取整函数">8.向上取整函数</h3>
<pre><code class="language-python">&gt;&gt;&gt; import math
&gt;&gt;&gt; math.ceil(1.1)
2
&gt;&gt;&gt; math.ceil(1.4)
2
&gt;&gt;&gt; math.ceil(1.9)
2
</code></pre>
<h3 id="9向下取整函数">9.向下取整函数</h3>
<pre><code class="language-python">&gt;&gt;&gt; import math
&gt;&gt;&gt; math.floor(1.9)
1
&gt;&gt;&gt; math.floor(1.5)
1
&gt;&gt;&gt; math.floor(1.2)
1
</code></pre>
<h3 id="10python列表追加元素append">10.python列表追加元素（append）</h3>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,2,3]
&gt;&gt;&gt; bbb = [4,5,6]
&gt;&gt;&gt; aaa.append(bbb)
&gt;&gt;&gt; aaa
[1, 2, 3, [4, 5, 6]]
&gt;&gt;&gt;
</code></pre>
<h3 id="11python列表追加元素extend">11.python列表追加元素（extend）</h3>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,2,3]
&gt;&gt;&gt; bbb = [4,5,6]
&gt;&gt;&gt; aaa.extend(bbb)
&gt;&gt;&gt; aaa
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt;
</code></pre>
<h3 id="12python列表排序sort直接改变原始列表没有返回值-通过设置超参数reverse来控制正反序">12.python列表排序（sort，直接改变原始列表，没有返回值。通过设置超参数reverse来控制正反序）</h3>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,3,2,5,4,2]
&gt;&gt;&gt; aaa
[1, 3, 2, 5, 4, 2]
&gt;&gt;&gt; aaa.sort()
&gt;&gt;&gt; aaa
[1, 2, 2, 3, 4, 5]
&gt;&gt;&gt; aaa.sort(reverse=True)
&gt;&gt;&gt; aaa
[5, 4, 3, 2, 2, 1]
</code></pre>
<h3 id="13python列表排序sorted不直接改变原始列表有返回值-通过设置超参数reverse来控制正反序">13.python列表排序（sorted，不直接改变原始列表，有返回值。通过设置超参数reverse来控制正反序）</h3>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,3,5,2,4,6]
&gt;&gt;&gt; aaa
[1, 3, 5, 2, 4, 6]
&gt;&gt;&gt; bbb = sorted(aaa)
&gt;&gt;&gt; bbb
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; ccc = sorted(aaa,reverse=True)
&gt;&gt;&gt; ccc
[6, 5, 4, 3, 2, 1]
</code></pre>
<h3 id="14python列表排序返回排好的下标">14.python列表排序（返回排好的下标）</h3>
<ol>
<li>
<p>python中并无直接返回下标的函数，如果需要从pyton底层做这事，可以使用sort或者sorted加上for循环获取index。</p>
</li>
<li>
<p>numpy中有函数返回排序后的下标：argsort</p>
</li>
<li>
<p><strong>torch自带的sort函数可以直接返回排好序的列表和对应的索引（推荐）</strong></p>
</li>
</ol>
<h3 id="15python列表逆序listreverse">15.python列表逆序list.reverse()</h3>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,2,3,4,5,6]
&gt;&gt;&gt; aaa
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; aaa.reverse()
&gt;&gt;&gt; aaa
[6, 5, 4, 3, 2, 1]
</code></pre>
<h3 id="16深拷贝和浅拷贝">16.深拷贝和浅拷贝</h3>
<p>概念：</p>
<ol>
<li>
<p>浅拷贝：只是增加了一个指针指向已存在的内存地址</p>
</li>
<li>
<p>深拷贝：是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，</p>
</li>
</ol>
<p>表象：假设B复制了A，修改A的时候，看B是否发生变化：</p>
<ol>
<li>
<p>如果B跟着也变了，说明是浅拷贝</p>
</li>
<li>
<p>如果B没有改变，说明是深拷贝</p>
</li>
</ol>
<p>python中的实现：</p>
<ol>
<li>python赋值（只要初始元素进行了修改，赋值之后的元素也会修改，反之亦然）：</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,2,3]
&gt;&gt;&gt; bbb = aaa
&gt;&gt;&gt; aaa.append(4)
&gt;&gt;&gt; aaa
[1, 2, 3, 4]
&gt;&gt;&gt; bbb
[1, 2, 3, 4]
&gt;&gt;&gt; aaa[0] = 100
&gt;&gt;&gt; aaa
[100, 2, 3, 4]
&gt;&gt;&gt; bbb
[100, 2, 3, 4]
</code></pre>
<ol start="2">
<li>浅拷贝（初始元素的直接子元素修改后不会影响到拷贝后的元素，但是如果某个元素是可迭代对象，那么就会影响到后来的元素）：</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; aaa = [1,2,[3,4]]
&gt;&gt;&gt; bbb = aaa.copy()
&gt;&gt;&gt; aaa[0] = 100
&gt;&gt;&gt; bbb.append(0)
&gt;&gt;&gt; aaa
[100, 2, [3, 4]]
&gt;&gt;&gt; bbb
[1, 2, [3, 4], 0]
&gt;&gt;&gt; aaa[2].append(200)
&gt;&gt;&gt; aaa
[100, 2, [3, 4, 200]]
&gt;&gt;&gt; bbb
[1, 2, [3, 4, 200], 0]
</code></pre>
<ol start="3">
<li>深拷贝（拷贝后的变量和原来的变量没有任何关系，除了值一样，改变前后两个变量都是独立的，不会对另一个产生影响）：</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; import copy
&gt;&gt;&gt; aaa = [1,2,[3,4]]
&gt;&gt;&gt; bbb = copy.deepcopy(aaa)
&gt;&gt;&gt; aaa
[1, 2, [3, 4]]
&gt;&gt;&gt; bbb
[1, 2, [3, 4]]
&gt;&gt;&gt; aaa.append(5)
&gt;&gt;&gt; bbb[0] = 100
&gt;&gt;&gt; aaa
[1, 2, [3, 4], 5]
&gt;&gt;&gt; bbb
[100, 2, [3, 4]]
&gt;&gt;&gt; aaa[2].append(5)
&gt;&gt;&gt; aaa
[1, 2, [3, 4, 5], 5]
&gt;&gt;&gt; bbb
[100, 2, [3, 4]]
</code></pre>
<h3 id="17-python中range和xrange的区别">17. python中range和xrange的区别</h3>
<ol>
<li>
<p>区别：xrange()与range()使用方法完全一样，区别就是range返回的是一个列表，xrange返回的是一个生成器</p>
</li>
<li>
<p>注意：目前的python版本已经不支持xrange了，只有range。</p>
</li>
</ol>
<h3 id="18python读取excel文件使用xlrd和xlwt">18.python读取excel文件/使用xlrd和xlwt</h3>
<ol>
<li>读取excel（未验证）</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; import xlrd
&gt;&gt;&gt; readbook = xlrd.open_workbook(r'\test\canying.xlsx')
&gt;&gt;&gt; sheet = readbook.sheet_by_index(1)#索引的方式，从0开始
&gt;&gt;&gt; sheet = readbook.sheet_by_name('sheet2')#名字的方式
&gt;&gt;&gt; nrows = sheet.nrows#行
&gt;&gt;&gt; ncols = sheet.ncols#列
&gt;&gt;&gt; lng = table.cell(i,3).value#获取i行3列的表格值
&gt;&gt;&gt; lat = table.cell(i,4).value#获取i行4列的表格值
</code></pre>
<ol start="2">
<li>保存excel</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; import xlwt
&gt;&gt;&gt; writebook = xlwt.Workbook()#打开一个excel
&gt;&gt;&gt; sheet = writebook.add_sheet('test')#在打开的excel中添加一个sheet
&gt;&gt;&gt; sheet.write(i,0,result[0])#写入excel，i行0列
&gt;&gt;&gt; writebook.save('answer.xls')#一定要记得保存
</code></pre>
<h3 id="19einopspython中对维度进行变换的库">19.einops（python中对维度进行变换的库）</h3>
<ol>
<li>维度互换--rearrange</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; import torch
&gt;&gt;&gt; from einops import rearrange
&gt;&gt;&gt; x=torch.rand((10,3,224,224))
&gt;&gt;&gt; print(x.size())
torch.Size([10, 3, 224, 224])
&gt;&gt;&gt; x = rearrange(x, 'b c h w -&gt;b h w c') #
&gt;&gt;&gt; print(x.size())
torch.Size([10, 224, 224, 3]) 
</code></pre>
<ol start="2">
<li>维度合并--rearrange</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; import torch
&gt;&gt;&gt; from einops import rearrange
&gt;&gt;&gt; x=torch.rand((10,3,224,224))
&gt;&gt;&gt; print(x.size())
torch.Size([10, 3, 224, 224])
&gt;&gt;&gt; x = rearrange(x, 'b c h w -&gt;b c (h w)')
&gt;&gt;&gt; print(x.size())
torch.Size([10, 3, 50176])
</code></pre>
<ol start="3">
<li>张量复制----repeat</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; from einops import repeat
&gt;&gt;&gt; x=torch.rand((224,224))
&gt;&gt;&gt; x.shape
torch.Size([224, 224])
&gt;&gt;&gt; x_repeat = repeat(x,'h w -&gt; c h w', c=3)
&gt;&gt;&gt; x_repeat.shape
torch.Size([3, 224, 224])
</code></pre>
<h3 id="02map根据提供的函数对指定序列做映射lambda匿名函数">02.map(根据提供的函数对指定序列做映射),lambda(匿名函数)</h3>
<p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p>
<pre><code class="language-python">&gt;&gt;&gt; def square(x) :         # 计算平方数
...     return x ** 2
...
&gt;&gt;&gt; map(square, [1,2,3,4,5])    # 计算列表各个元素的平方
&lt;map object at 0x100d3d550&gt;     # 返回迭代器
&gt;&gt;&gt; list(map(square, [1,2,3,4,5]))   # 使用 list() 转换为列表
[1, 4, 9, 16, 25]
&gt;&gt;&gt; list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))   # 使用 lambda 匿名函数
[1, 4, 9, 16, 25]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://haozhihang123.github.io/post/hello-gridea/</id>
        <link href="https://haozhihang123.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<iframe  class="music" frameborder="no" src="//music.163.com/outchain/player?type=1&id=89680147&auto=1&height=90"></iframe>
👏  欢迎使用 **Gridea** ！  
✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... 
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>